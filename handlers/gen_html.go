package handlers

import "fmt"

func generateHTML(left, right string) string {
	return fmt.Sprintf(`<!DOCTYPE html> <html lang="en"> <head> <meta charset="UTF-8"> <title>Differ JSON viewer </title> <style> body { font-family: monospace; display: flex; height: 100vh; margin: 0; } .container { flex: 1; overflow: auto; padding: 20px; box-sizing: border-box; } .left { background: #f8f8f8; border-right: 1px solid #ccc; } .right { background: #fcfcfc; } .key { color: #333; } .only-left { color: red; } .only-right { color: green; } .diff-key { color: blue; } .diff-left-val { color: red; } .diff-right-val { color: green; } .toggle { cursor: pointer; color: #888; margin-right: 5px; } .collapsed > .content { display: none; } pre { white-space: pre-wrap; word-wrap: break-word; } </style> </head> <body> <div class="container left"> <h2>Left JSON</h2> <pre id="left"></pre> </div> <div class="container right"> <h2>Right JSON</h2> <pre id="right"></pre> </div> <script> const leftData = %s; const rightData = %s; const lObj = JSON.parse(leftData); const rObj = JSON.parse(rightData); function escapeHTML(str) { return String(str).replace(/[&<>"']/g, function (m) { switch (m) { case '&': return '&amp;'; case '<': return '&lt;'; case '>': return '&gt;'; case '"': return '&quot;'; case "'": return '&#39;'; } }); } function render(objA, objB, side) { function recurse(currentA, currentB, indent) { let result = ""; if (typeof currentA !== 'object' || currentA === null) { result += escapeHTML(JSON.stringify(currentA !== undefined ? currentA : null)); return result; } const isArray = Array.isArray(currentA); const opener = isArray ? '[' : '{'; const closer = isArray ? ']' : '}'; result += "<div><span class='toggle'>[-]</span>" + opener + "<div class='content' style='margin-left:20px;'>"; const keys = isArray ? currentA.map((_, idx) => idx) : new Set([...Object.keys(currentA || {}), ...Object.keys(currentB || {})]); (Array.isArray(keys) ? keys : Array.from(keys)).forEach((key) => { const aVal = currentA ? currentA[key] : undefined; const bVal = currentB ? currentB[key] : undefined; let keyClass = "key"; let valClass = ""; if (aVal !== undefined && bVal === undefined) { keyClass = "only-left"; valClass = "only-left"; } else if (aVal === undefined && bVal !== undefined) { keyClass = "only-right"; valClass = "only-right"; } else if (JSON.stringify(aVal) !== JSON.stringify(bVal)) { keyClass = "diff-key"; valClass = (side === "left") ? "diff-left-val" : "diff-right-val"; } result += "<div>"; if (!isArray) { result += "<span class='" + keyClass + "'>\"" + escapeHTML(key.toString()) + "\"</span>: "; } if (typeof aVal === 'object' && aVal !== null) { if (side === "left") { result += recurse(aVal, bVal, indent + "  "); } else { result += recurse(bVal, aVal, indent + "  "); } } else { const val = (side === "left") ? aVal : bVal; result += "<span class='" + valClass + "'>" + escapeHTML(JSON.stringify(val !== undefined ? val : null)) + "</span>"; } result += "</div>"; }); result += "</div>" + closer + "</div>"; return result; } return recurse(objA, objB, ""); } function postProcess() { const toggles = document.querySelectorAll('.toggle'); toggles.forEach(toggle => { toggle.addEventListener('click', function() { const parent = toggle.parentNode; parent.classList.toggle('collapsed'); toggle.textContent = parent.classList.contains('collapsed') ? '[+]' : '[-]'; }); }); } document.getElementById('left').innerHTML = render(lObj, rObj, "left"); document.getElementById('right').innerHTML = render(rObj, lObj, "right"); postProcess(); </script> </body> </html>
`,
		fmt.Sprintf("%q", left),
		fmt.Sprintf("%q", right))
}
